#
What is the shared memory model?
All memory placed in a single physical address space. There is virtual address space across all memeory. All threads can access the shared memeory model.
#
What memory model does java use?
The shared memory model
#
What is a cache?
it is a hardware or software component that stores data so future requests are serviced faster. It is the bridge between the main memory and the processor
#
What is a thread?
A thread is a lightweight process that the operating system can schedule and run concurrently with other threads. It shares the same resources and address space as the program that created it.
#
How do threads communicate with each other?
Threads communicate implicitly through shared memory. WARNING*** it is important to protect variable correctly. To communicate, a thread must write somewhere another thread will read.
#
How many cores will a program use?
The programmer DOESNT KNOW. You can only make a guess.
#
How many threads will the program use?
DONT KNOW. cant guess
#
What are the two programming models?
Sequential Program state and shared memory state
#
How many program counters and call stacks does the sequential program state have? and how does it work?
It has one program state and one call stack. Each stack frame holds local variables for a method that is running.
#
How does a stack work?
In a stack, there are multiple frames. Each frame holds variables for a method that is running. Calling a method pushes a new frame on to the stack. Returning from a method pops a frame from the stack.
#
How does the call stack and program counter work in the shared memory program model?
Each thread has its own program counter, call stack and local variables. Threads share all objects and static fields.
#
What is asynchrony?
Threads are suceptable to sudden, unpredictable delays. These include cache misses, page faults and scheduling quantum finished.
#
Where does a chache miss occur and waht is it?
A cache miss occurs when the data being requested isnt found in cache memory. This occurs between the shared emmory and the local cache.
#
WHhere does a page fault occur and what is it?
A page fault occurs between the sahred memory and the disk. It is when a program attempts to access data that is in an address space but not currently in RAM.
#
How does Java coordinate operations?
Java has synchronisation primitives and thread safe and concurrent classes.
#
How does the JVM work?
Executes as a process under the operating system. This supports mutliple threads. Thus Java is ALWYAYS multithreaded.
#
Why is Java always multithreaded?
Every java program has more than one thread. There is the main thread which can create additional threads. There is the system threads of garbage collection and signal handeling. And threads to compile Java bytecode. Standard libraries also use threads.
#
What class are basic threads associated with?
java.lang.Threads
#
What does a thread class do?
It manages a single sequential thread of control.
#
How do you create a new thread object?
Thread myThreadsName = new ThreadClassThatTheThreadIsBeingCreatedIn();
#
How does the thread class execute instructions?
Thread class executes instructions from its method run(). The actual code executed depends on the implementation provided for run() in a derived class.
#
How does a class that wants to create Thread objects get the thread class?
class ThreadClassThatTheThreadIsBeingCreatedIn extends Thread {}
#
What is the runnable interface and why is it soemtimes used over the Thread class?
Java does not permit multiple inheritance. it is sometimes more convenient to implement the run() method in a class not derived from Thread, but from the interface Runnable. 
#
How do you create a thread object in a class that extends the runnable interface?
Thread b = new Thread(new ThreadClassThatTheThreadIsBeingCreatedIn())
#
How do you begin a thread?
call the start() method on the object of the class. The start() ethod uses the run() method as its main. start() makes the thread call its own run() method.
#
What happens if you call the run method on a thread?
This is just a normal method call for the current thread.
#
What happens to a thread when it returns?
it is terminated. isAlive() will return False.
#
What does the join() method do?
makes the calling thread wiat until another thread has completed its execultion. the method is on the thread you wan to wiat on.
#
How can you terminate a thread?
The only way to terminate a thread is to arrange for run() to return.
#
What are executor objects in Java?
They distribute tasks to worker threads in a thread pool. This seperates thread creation and manegement from the application.
#
Why are thread pools beneficial?
they reduce overhead? allocating and deallocating many thread objects requires significant memory management
#
What is an Executor interface in Java?
It provdes basic support for launching new tasks
#
What is the fork/join framework?
it is an implementation of the executor service designed for divide and conquer algorithms. Idle tasks are stolen from busy threads.
#
What is the difference between RecursiveAction and RecursiveTask?
RecursiveAction has no return value and RecursiveTask returns a value
#
How to find out how many threads are currently running in the progarm?
int noThreads = Runtime.getRuntime().availableProcessors();
#
How do you create a ForkJoinPool?
static final ForkJoinPool fjPool = new ForkJoinPool();
#
What is the parallelism of a new ForkJoinPool()?
parallelism equal to Runtime.availableProcessors().
# 
What is the parallelism of a new ForkJoinPool.commonPool()?
parallelism equal to Runtime.availableProcessors() -1.
#
Why is it better to create one thread that forks instead of two recursive threads that fork?
It cuts the number of threads by half.
#
What is a sequential cut off?
point in a parallel algorithm or computation where it becomes more efficient to perform the remaining work sequentially.
#
When is fork/join really useful?
When there is parallel computation many times, when threads have a load imbalance and a lot to do.
#
What are the two types of parallel image processig?
point processing and local operations
#
What is point processing in terms of parallel image processing?
The output value of the process is based on a signel pixel value.
#
What is a local operation in terms of parallel image processing?
the output of the process is based on a group of neighbouring pixels and their values. An example is image smoothing.
#
What is a reduction operation in basic divide and conquer algorithms?
they produce a single answer from a collection. examples include finding the max, min, count, rightmost, sum etc...
#
What is a map in a basic divide and conquer algorithm?
A map operates on each element of a collection independently to create a new collection of the same size
#
What is a Monte Carlo method?
Monte Carlo methods make use of random selections in calculations that lead to the solution of numerical and physical problems
#
How do you demonstrate efficiency with a parallel algorithm?
You benchmark the algorithm against a serial counter part to show it is faster.
#
What is speed up?
Speed up = work/ time for p porcesses
#
What is work?
How long it would take 1 processor = T1
#
What is span?
How long it would take infinity processors = T_infinity
#
What is the maximum possible speed up?
max speedup = work/span
#
Whart is a parallel algorithm?
A paralell algorithm aims to decrease span without increaseing work.
#
Explain the work law? T_p>=T_1/p
each processor executes at most 1 instruction per unit time, and hence P processors can execute at most P instructions per unit time. Thus, to do all the work on P processors, it must take at least T1/P time
#
Explain the span law T_p>= T_infinity
a finite number of processors cannot outperform an infinite number of processors, because the infinite- processor machine could just ignore all but P of its processors and mimic a P-processor machine exactly.
#
What is a DAG graph? What are the nodes and edges representing?
Nodes represent pieces of work (instructions), edges join nodes and represent dependencies.
# 
What is the work in a DAG?
Work is the number of nodes in the graph 
#
What is the span in a DAG?
the length of the longest path
#
What is the time complexity of work?
O(n)
#
What is the time complexity of span?
O(logn)
#
What is the time complexity of the maximum speed up?
n/logn
#
What is parallelisation overhead?
It is the additional time required to coordinate and synchronise parallel tasks as well as creating and managing threads.
#
What is Amdahls Law?
Speed up is 1/(1-p+(p/n)). This explains that some parts of a program are inherently sequential while others should be parallised. n is the numnber of processors.
#
Why is Amdahls law incorrect now?
The ratio of sequential to parallel protions of the algorithm varies and is not constant. It varies with problem size.
#
What is strong scaling?
The problem size is fixed (total problem size is fixed will number of processors varies)
#
What is weak scaling?
the execution time is fixed (fixed problem size per processor)
#