#
What are programmable chips?
A programmable chip can be configured according to the users needs. This means the same chip can be used for a variety of purposes.
#
What are the benefits of a programmable chip?
~It can be used for many purposes including prototyping and final product~It has a low starting cost~ there is risk reduction~ increases turn around time
#
WHat are the types of porgrammable chips? List them from simpla and cheap to complex and expensive.
PLAs, CPLDs and FPGAs
#
How is the size of a PLD (programmable logic device) measured?
It is measured in the number of Logic Elements (LE's) that it contains.
#
What is a Programmable Logic Block (PLB)?
It contains manny programabble Logic Elements (PLE's).
#
Draw a diagram to represent the Internal Structure of an FPGA.
!FileHandeling Section/pictures/Screenshot 2023-10-26 at 13.07.43.png
#
What is the PLD/FPGA Development Flow? 
!FileHandeling Section/pictures/IMG_0484.jpg
#
Where is most of the development time of FPGA's spent?
In terms of the engineers time: In the Design and RTL Coding or the Timing Analysis| In terms of the PC's time: in the Place and Route
#
What are the four essential ingredients in Verilog Coding?
1. Modules| 2. Ports|3. Wires|4. Registers
#
What is a Module in Verilog Coding?
A module is the basic clock that does something and is connected to another. Modules are hierachical meaning they can be individual elements of composed of other modules.
#
What is the syntax for creating a module in Verilog?
module<module name>(<port names>);|...|endmodule
#
What are module ports?
A port is an interface used to move signals into or out of a module. You would declare these in the port names section in creating a module. The convention is to specify input ports first.
#
What are the wires?
They are used to connect elements, such as different ports of modules. Wires have values that are continously driven onto them.
#
How would you define a wire in a circuit?
wire a;
#
What is a register?
A register stores data until another value is put into them. It doesnt need a continous driver.
#
How do you declare a new register?
reg thisIsMyNewRegisterThatIAmDeclaring; // it defaults to 1 benefits
#
How do you change the value or set the value in a register?
thisIsMyNewRegisterThatIAmDeclaring = 1'b1; //this sets the value to 1
#
What are the different levels of abstraction is Verilog? List from lowest to highest level
The different levels of abstraction are used to represent a digital ciruit or system. Each level provides a different perspective on the design. 1. Switch Level| 2. Gate Level|3. Data Flow Level|4. Behavioural Level
#
What does the Switch Level Abstraction mean?
This means Verilog is only implemented using switches and interconnects (transistors and their switching behaviour). This is the lowest level of abstraction. At this level designers work with describing the exact operation of every transistor in the circuit.
#
What is the meant by the Gate Level of Abstraction Level in Verilog?
This means Verilog is only implementing terms of logic gates and using interconnects between gates. The gates are described in terms of how they implement a specific function. 
#
What is the meant by the Data Flow Level of Abstraction Level in Verilog?
This means that veriolog is implemented only in terms of data flow between registers. It describes how different operations are performed on the data. This means it shpws the functional behaviour of the circuit. It is usually used for algorithmic modeling.
#
What is the meant by the Behavoural Level of Abstraction Level in Verilog?
The module is implemented in terms of higher level algorithms. Hardware issues arent addressed. It resembles C programming thus it is the most abstract and human readable. If-else statements and for loops can be used. This is often used for simulating and veryfying the functionality of design.
#
How are numbers formatted in Verilog?
<size (how many bits or the bit width)>'<base is the radix eg binary><the actual number you want to represent>
#
What does 3'b111 represent in Verilog?
3 = bits  needed| b = it is represented in binary| 111 = the actual number. in this case it is 7 in base 10
#
What does 8'ha1 represent in Verilog?
8 = 8 bits are needed to represent the number| h = number that follows is represented in hexadecimal| a1 = the number which is 161 in base ten.
#
What does 24'd165 mean?
24 bits are needed to represent the number| d means that the radix is decimal| 165 means the number is 165 in base ten.
#
How would you represent the number 310 (base ten) in octal radix in verilog?
9'0466
#
What are the constant values in Verilog?
0=logic 0 or false or low| 1=logic 1 or true or high|x=unknown|z=floating or high impedance
#
How do you define a register vector of 18 bits?
reg [0:17] thisIsMyRegisterOf18Bits;
#
How would you define an 8-bit bus wire?
wire [7:0] thisIsMyBusWithEightBits;
#
What are non-synthesisable data types?
The data types cant be translated into hardware during the synthesis process. They are used for simulation and modeling and are not intended for hardware implementation. These data types would typically be used to do high level things like checing loops or in calculations.
#
What are the non-synthesisable data types? What are they and how can they be defined.
Integer which is a 32 bit value, It can be defined as follows:~ integer i;| Real is a 32 bit floating point value. It can be described as follows:~ real r;| Time represents a 64-bit value used in simulation of delays. It can be defined as follows:~ time t;
#
Given the following code, draw the CLB block and its interface: module AND2(A, B, C);|    input A, B;|   output C;|   assign C = and(A,B);|endmodule
!FileHandeling Section/pictures/Screenshot 2023-10-27 at 12.24.44.png
#
What extension do Verilog files have?
.v
#
What is in each Verilog file?
Each module should be in its own .v filenamed acoording to the module name.
#
What is a build system?
The Verilog build system includes various tools and a defined workflow that ensures your Verilog code goes from a high-level description to a working hardware implementation on the target platform.|| The compiler will read all the *.v files listed.
#
What is the Top Level Module?
It is the parent of all other modules and needs to be specified to the compiler. The compiler will then decide what other modules need to be compiled and connected.
#
!FileHandeling Section/pictures/IMG_0485.jpg
!FileHandeling Section/pictures/IMG_0486.jpg
#
How and why do we instantiate modules? 
It makes the code easier.|This is how we use other modules in the current module. Think of each module like a function. If i want to use the add function, i have to create a module for it.
#
What does always@ mean?
It is used to signal that the next block will always execute and it contain procedural code. Procedural code describes how the circuit should behave.
#
What does|     always @(posedge clock)|       count<= count + 1| mean ?
It specifies that the block following block (that is the count stuff) should always execute on the positive edge of the clock signal. The stuff in the brackets is the conditions.
#
How do you make sure things are done sequentially?
Put them in a blocking assignment in an always block.
#
How can things be done in parallel?
But them in a non-backing assignment. Everything in the block will occur at once.
#
What is the HDL Testbench?
It is the code that will excersize and test the "module under test" or the module being implemented.| You can set the values of the ports or create test vectors.| The test bench is essentially another Verilog module.
#
Is the HDL testbench synthesisable?
No, it is non-synthesisable meaning it can only work with a simulator.
#
How many testbenches can you have?
Any amount to test anything.
#
How would you implement a 4-bit counter?~When the reset line is high the count walue is set to 0~If enable is high and there is a positive clock edge, increment the count~The count output value gives the count value
!FileHandeling Section/pictures/Screenshot 2023-10-27 at 13.16.12.png
#
What does the following simulator (or replication) command do?: Timescale
It specifies the timescale to use in the simulation
#
What does the following simulator (or replication) command do?: (hash)n    [the hash is a hashtag sympol i just cant pput it ther currently]
it delays the simulation for n timescale periods. The delay is in the unit of timeUnitHere. The hash operator indicates a delay.||Put it to the left of the statement to delay before statement executes.|Or put it to the right of the statement to delay after statement is performed
#
What does the following simulator (or replication) command do?: iniitial
used to specify a block of code that is executed only once at the beginning of a simulation. It is often used to set up initial conditions, perform initialization tasks, or define the initial state of variables and signals.| It may be used to initialise register values.|Think of it like a constructor for a verilog module simulation.
#
What does the following simulator (or replication) command do?: $display
it works like printf
#
What does the following simulator (or replication) command do?: $monitor
command for monitoring changes to lines and displaying pin values whenever they change. It is very helpful in debugging.
#
What does the following simulator (or replication) command do?: for
it is used to indicate the begining of a for loop.
#
What does the following simulator (or replication) command do?: repeat
It indicates that a certain block will be repeated. It is synthesisable
#
What does the following simulator (or replication) command do?: $finish
will exit the simulation
#
What is the correct way to use and initialise the timescale simulator command?
timescale timeUnitHere/timePrescisionUnitHere| so it could be:|   timescale 1ns / 1ps
#
What happens if the timescale is smaller?
The simulation is slower but has more accurate precision
#
How do you specify a bus that that has 21 bits with the LSB at 0? (Meaning the bus is Little Endian)
reg [20:0] busA
#
How do you specify a bus that that has 21 bits with the MSB at 0? (Meaning the bus is Big Endian)
reg [0:20] busB
#
How could you select bit 3 in a 10 bit bus if the bus is called bussy?
bussy[2]
#
How could you select a sequence of bits, from bit 3 for 3 bits, in a bus called bussy? 
bussy[2:4]; |This would select bussy[2], bussy[3] and bussy[4]
#
How would i concatenate some bits in verilog?
Concatenaation is done using the curly braces.
#
How many bits are in the following object res1?:| assign res1 = {{a[15]},{a[15:0]}}
17 bits. Why?| {a[15]} means take the 16th bit of a and make a new signal from it.| {a[15:0]} means take all the bits from the 16th bit to the first bit and concatenate them together to make a new symbol.| The outside {} mean that you concatenate the afroementioned things togetehr.
#
!FileHandeling Section/pictures/IMG_0488.jpg
!FileHandeling Section/pictures/IMG_0489.jpg
#


