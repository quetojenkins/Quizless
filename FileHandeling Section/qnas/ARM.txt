#
Where is ARM used?
~consumers~gaming~networks~reliability
#
What is RISC?
It is a DESIGN PHILOSOPHY known as "reduced instruction set computer".
#
Give 5 attribues about RISC. (no. of instructions / addressing modes ? / instructions ? / operations ? / memory ?)
~<100 instructions~minimal addressing modes (techniques used by a CPU to access data in memory or registers)~fix length instructions all taking the same amount of cycles~only operates on registers~only load/store on memory cant operate on it
#
What is CISC?
It is a DESIGN PHILOSOPHY known as "complex instruction set computer".
#
Give 5 attribues about CISC. (no. of instructions / operations ? / instruction length? / addressing modes ?)
~100-250 instructions~manipulate operations in memory~variable instruction length & no. cycles~lots of memory modes
#
Give two alternatice processors to ARM and some brief facts about them.
PIC~low cost/power~easy programming~pure/modified harvard architecture|AVR~lower power and cost
#
Specify what type of processure architecture you would use in the following cases?|~ABS brakes~Radio control of a model airplane~Car radio (e.g., auto tuning, stored stations)~Washing machine~Portable battery-operated game console~Weather sensor~Garage door opener~iPad~Burglar alarm
~ABS brakes - ARM or AVR~Radio control of a model airplane – PIC or AVR~Car radio – PIC for auto turning feature at least~Washing machine – Probably a PIC~Portable battery-operated game console - ARM~Weather sensor – PIC (lowest power options, usually doesn’t need speed)~Garage door opener – PIC or AVR, something cheap ~iPad – ARM~Burglar alarm - probably a PIC, if there’s not much signal processing
#
Please explain what is meant by CORTEX when referring to the ARM processor architecture?
CORTEX is a range of ARM proessors that is high performing compared to low power consumption, it executes thumb instructions and uses three stage pipelining.
#
Please describe the ARM naming convetion.
!FileHandeling Section/pictures/arm_convention.png
#
What is meant by a "Thumb" instruction?
It is a 16 instead of 32 bit instruction that allows one to store 2 instructions in one data word which increases code density.
#
Explain the difference between the states and modes of operation.
The state of operation describes how individual instructions aare processed by the processor and the mode of operation describes the funtional state of teh processor that determines the general behavior/ capabilities.
#
Please list all 7 modes of operation and give a brief description of all of them.
~User = where applications are run, limited registers and emory access ~Interrupt ReQuest (IRQ) = entered when low priority interrupt triggered ~fast interrupt ReQuest (FIQ) = entered when high priority interrupt triggered (sseperate registers) ~supervisor = entered on system reset & software initialisation ~abort = entered when memory exception~undef = entered when undefined instruction called ~system = privilaged, just user with fewer restrictions 
#
Please list all 4 states of operation and describe how each handles instructions.
~arm32 = 32 bit address and instruction~arm64 = 64 bit address and instruction~thumb = 16 bit instruction~jazelle = 8 bit java bytecode
#
Name all registers used by arm32.
~1 PC(program counter)~1 CPSR(current program status register)~5 SPSR(saved program status register)~30 GPR(general purpose register)
#
Name all registers accessable in any mode.
~GPR (r0-r12)~own stack pointer (r13/sp)~own link register (r14/lr)~program counter (pc)
#
What register is accessible from any mode except user and system mode?
SPSR - used to save state when handling interrupts or exceptions
#
Heres the register mode map with all the registers each mode has access to it. I dont know what sick fuck is going to learn this.
!FileHandeling Section/pictures/register_mode_map.png
#
Try explain what each bit in the program status register is used for, i dare you !
!FileHandeling Section/pictures/program_status_register.png
#
Which bits are ignored/included in the program counter register for both thumb and arm32 states?
~Thumb = 1-31 is included and 0 is ignored~arm32 = 2-31 is included and 0-1 is ignored
#
Give all the steps taken when an exception is triggered.
Handling the exception:~Exception is triggered~Change to exception mode (e.g. Undef)~change to arm32~disable interrupts~LR=PC~PC=address of the excption vector~execute exception vector handler||Going back to where you were:~change to arm32 (i know again)~CSPR = SPSR (restore the status)~PC=LR~get on with it homie
#
How are exceptions stored?
They are stored as handler functions in an exception vector.
#
Explain bothe types of endianness, big and small.
BE = msb stored / read first||LE = lsb stored / read first
#
Why would one consider using assembly within a C program?
faster and specialised
#
How does one use assembly within a C program?
C <-> ABI (an interface between two binary program modules) <-> Assembler
#
Give the structure of the .s file that contains the assembly function that can be called by the C program.
.global name # ensures name can be accessed from other modules|.type name, function # label "name" is the function|name: # craete function symbol|     *function code*
#
Give the line inside the C header file that declares the assembly function.
ex. char* name(char* example_in_1, char* example_in_2)
#
What is a calling convention and how is it defined?
The calling convention describes the way that parameters, return values, local variables and return address are handled. They are defined by the ABI.
#
Explain the calling convention used between GCC and ARM.
When a function is called a function prologue is called which sets up the stack for local variables and aafter the function is finnished the function epilogue is called which frees up the local variables.
#
What are stack frames?
They are a space allocated to a specific function. The start of the stack frame is denoted by the frame pointer (SP) that points to the next free location in the stack. It also grows down which is funky.
#
Write out the prologue function.
bl <function label> # go to function|mov ip, sp # set ip to sp|stmfd sp!, {fp,ip,lr,pc} # add those things to the stack|sub fp, ip, #4 # fp set to 1 below ip|sub sp, sp, #16 # increment sp for local variable space
#
What is the epilogue functions purpose and write it out !
It is used to pop registored stored in the stack after the function.||Fucntion:|ldmea fp, {fp,sp,pc} # loads multiple memory locations into registers||after the above function iexecution, th evalue of lr has been loaded into pc casuing the processor to return to where it was.
#
Explain store before call and what its used for. Also how do you calculae its overhead?
Its used to save local variables. How it execites is it stores the variables, calls the function and the loads the previously stored variables back to thier rightfull home.||overhead = no. of registers used ny code before * 2
#
Explain call before store and what its used for. Also how do you calculae its overhead?
Its used to save local variables. How it execites is it calles the function, stores all registers that the function is going to use, excecutes and loads all the stored values back into thier registers.||overhead = no. registers used by the function * 2
#
What is the C runtime environment and what 2 parts is it made up of.
It is the software structure that supports program execution.||Its made up of the start-up code and the run-time libraries||The run-rime libraries simplify hwo the programs interact with the environment.
#
What is object code and the idea of its placement?
Object code is the code generated by the complier that is placed in memory and integrated into a suitable binary format.||The linker takes different pieces of object code from memory and combines it into one executeable file.||The actual placement in memory is controlled by the linker and cmd line.
#
What is CMAKE?
open source cross platform family of tools to build test and package software
#
What is memory budgeting?
Juggling the available memory and how much memory the program will need to run.
#
What is a stack overflow?
It is when the program tries to use more memory in the call stack than has been allocated.
#
Here all the arm instrcutions. List every single one of them ! Or you like sucking toes.
!FileHandeling Section/pictures/arm_instructions.png
#
What are you doing when you add an S at the end instruction.
Updating the condition flag~zero (Z)~sign (S)~overflow (V)~carry (C)
#
Branch suffixes. Eat it and weep.
!FileHandeling Section/pictures/branch_suffixes.png
#
Conditional Branches. Go to the bahamas or name them all.
!FileHandeling Section/pictures/cond_branches.png
#
Give the general structure of a branch instruction.
B <address>
#
Give the general structure of a branch and link instruction
BL <subroutine>
#
Give the general strucure of a data processing instruction
OP<suffix> <result>, <op1>, <op2>
#
Give the general structure of a assignement statement.
MOV <dest> <src>||MVN <dest> <src> # same but just with the complement
#
Give the general structure of a sshift instructure and name akk 4 and what they do.
SHIFT <reg>||LSL = logocal shift to the left|RRX = rotate right with carry|ROR = rotate right without carry|ASR = arithmetic shift right
#
Give the structures of the two status register transfer instructions.
MSR<suffix> <sr> <reg> # move to sr||MRS<suffix> <reg> <sr> # move from sr
#
Tune how to load and store.
LDR <reg>, =<label / value / address>|STR <reg> [<reg>]||then you can also add ", #no" at the end to offset the storing / loading
#